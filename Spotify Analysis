# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# Determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name ,track_name ,avg(popularity) ,avg(danceability) ,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(popularity) desc;

# Who are the top 10 artists based on popularity?
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

# Who released the longest song?
SELECT track_name, artist_name, duration_ms
FROM BIT_DB.spotifydata
ORDER BY duration_ms desc
LIMIT 1;

# What's the average danceability per song?
SELECT SUM(danceability)/COUNT(id)
FROM BIT_DB.spotifydata;

# What is the average danceability by artist?
SELECT DISTINCT artist_name, AVG(danceability)
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY AVG(danceability) desc;

# What has the most acousticness?
SELECT track_name, artist_name, acousticness
FROM BIT_DB.spotifydata
ORDER BY acousticness desc
LIMIT 1;

# Which song has the fastest tempo?
SELECT track_name, artist_name, tempo
FROM BIT_DB.spotifydata
ORDER BY tempo desc
LIMIT 1;

# Which song is the least liveness?
SELECT track_name, artist_name, liveness
FROM BIT_DB.spotifydata
ORDER BY liveness asc
LIMIT 1;

# Which song has the highest valence?
SELECT track_name, artist_name, valence
FROM BIT_DB.spotifydata
ORDER BY valence desc
LIMIT 1;
